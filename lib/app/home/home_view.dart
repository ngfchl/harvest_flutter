import 'dart:io';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_popup/flutter_popup.dart';
import 'package:get/get.dart';
import 'package:harvest/app/home/pages/web_socket_logging/view.dart';
import 'package:harvest/common/card_view.dart';
import 'package:harvest/common/form_widgets.dart';
import 'package:harvest/utils/logger_helper.dart';
import 'package:shadcn_ui/shadcn_ui.dart';

import '../../api/mysite.dart';
import '../../api/option.dart';
import '../../common/custom_ua.dart';
import '../../common/custom_upgrade.dart';
import '../../common/invite_user.dart';
import '../../common/logging.dart';
import '../../common/site_map.dart';
import '../../common/video_player_page/video_page.dart';
import '../../models/common_response.dart';
import '../../theme/theme_view.dart';
import '../../utils/screenshot.dart';
import '../../utils/storage.dart';
import '../../utils/string_utils.dart';
import 'controller/common_api.dart';
import 'controller/home_controller.dart';

class HomeView extends GetView<HomeController> {
  HomeView({super.key});

  final GlobalKey<ScaffoldState> _globalKey = GlobalKey();
  final GlobalKey _captureKey = GlobalKey();

  @override
  Widget build(BuildContext context) {
    String cacheServer = 'https://images.weserv.nl/?url=';
    double opacity = SPUtil.getDouble('cardOpacity', defaultValue: 0.7);
    var shadColorScheme = ShadTheme.of(context).colorScheme;
    return GetBuilder<HomeController>(builder: (controller) {
      return PopScope(
        canPop: false,
        onPopInvokedWithResult: (didPop, _) async {
          if (didPop) return;
          Get.defaultDialog(
            title: "ÈÄÄÂá∫",
            content: const Text('Á°ÆÂÆöË¶ÅÈÄÄÂá∫Êî∂Ââ≤Êú∫ÂêóÔºü'),
            // onConfirm: () {
            //   exit(0);
            // },
            cancel: ShadButton.destructive(
                size: ShadButtonSize.sm,
                onPressed: () {
                  Navigator.of(context).pop(false);
                },
                child: const Text(
                  'ÂèñÊ∂à',
                )),
            confirm: ShadButton(
                size: ShadButtonSize.sm,
                onPressed: () {
                  exit(0);
                },
                child: const Text(
                  'ÈÄÄÂá∫',
                )),
            textCancel: 'ÂèñÊ∂à',
            // textConfirm: 'ÈÄÄÂá∫',
            // confirmTextColor: Colors.red,
            // buttonColor: Colors.red,
          );
        },
        child: RepaintBoundary(
          key: _captureKey,
          child: Stack(
            children: [
              GetBuilder<HomeController>(
                  id: 'home_view_background_image',
                  builder: (controller) {
                    // Logger.instance.d(
                    //     "useBackground: ${controller.useBackground} useLocalBackground: ${controller.useLocalBackground} backgroundImage: ${controller.backgroundImage}");
                    if (controller.useBackground) {
                      return Positioned.fill(
                        child: controller.useLocalBackground && !controller.backgroundImage.startsWith('http')
                            ? Image.file(
                                File(controller.backgroundImage.isNotEmpty
                                    ? controller.backgroundImage
                                    : 'assets/images/background.png'),
                                fit: BoxFit.cover,
                              )
                            : controller.useImageCache
                                ? CachedNetworkImage(
                                    imageUrl:
                                        '${controller.useImageProxy ? cacheServer : ''}${controller.backgroundImage}',
                                    placeholder: (context, url) => Image.asset(
                                      'assets/images/background.png',
                                      fit: BoxFit.cover,
                                    ),
                                    errorWidget: (context, url, error) => Image.asset(
                                      'assets/images/background.png',
                                      fit: BoxFit.cover,
                                    ),
                                    fit: BoxFit.cover,
                                    cacheKey: controller.backgroundImage,
                                  )
                                : Image.network(
                                    '${controller.useImageProxy ? cacheServer : ''}${controller.backgroundImage}',
                                    fit: BoxFit.cover,
                                  ),
                      );
                    }
                    return SizedBox.shrink();
                  }),
              Scaffold(
                key: _globalKey,
                backgroundColor: controller.useBackground
                    ? Colors.transparent
                    : shadColorScheme.background.withOpacity(opacity * 1.2),
                extendBody: true,
                appBar: AppBar(
                  backgroundColor: shadColorScheme.background.withOpacity(opacity),
                  iconTheme: IconThemeData(color: shadColorScheme.foreground),
                  toolbarHeight: 40,
                  elevation: 0,
                  actions: <Widget>[
                    _actionButtonList(context),
                  ],
                ),
                body: GetBuilder<HomeController>(builder: (controller) {
                  return Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      if (!controller.isPortrait)
                        controller.isSmallHorizontalScreen
                            ? SizedBox(
                                width: 120,
                                // height: double.infinity,
                                child: _buildMenuBar(context),
                              )
                            : CustomCard(
                                width: 200,
                                // height: double.infinity,
                                child: _buildMenuBar(context),
                              ),
                      Expanded(
                          child: Padding(
                        padding: const EdgeInsets.symmetric(vertical: 2.0, horizontal: 3),
                        child: PageView(
                          controller: controller.pageController,
                          physics: const NeverScrollableScrollPhysics(),
                          onPageChanged: (index) {
                            // controller.initPage.value = index;
                            // controller.update();
                          },
                          children: controller.pages,
                        ),
                      ))
                    ],
                  );
                }),
                drawer: controller.isPortrait
                    ? SizedBox(
                        width: 200,
                        child: Drawer(
                          semanticLabel: 'Harvest',
                          elevation: 10,
                          backgroundColor: shadColorScheme.background,
                          child: _buildMenuBar(context),
                        ),
                      )
                    : null,
                drawerEdgeDragWidth: 100,
              ),
            ],
          ),
        ),
      );
    });
  }

  Widget _buildMenuBar(BuildContext context) {
    var colorScheme = ShadTheme.of(context).colorScheme;
    return GetBuilder<HomeController>(builder: (controller) {
      return IntrinsicHeight(
        child: ConstrainedBox(
          constraints: BoxConstraints(
            minHeight: MediaQuery.of(context).size.height, // Á°Æ‰øùÂÆΩÂ∫¶ÈÄÇÈÖçÂ±èÂπï
          ),
          child: Column(
            children: [
              GetBuilder<HomeController>(builder: (controller) {
                if (!controller.isSmallHorizontalScreen) {
                  var baseUrl = SPUtil.getLocalStorage('server');

                  return DrawerHeader(
                    decoration: const BoxDecoration(
                      color: Colors.transparent,
                    ),
                    padding: EdgeInsets.symmetric(horizontal: 8),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      mainAxisSize: MainAxisSize.min,
                      children: <Widget>[
                        const ShadAvatar(
                          'assets/images/avatar.png',
                          size: Size(50, 50),
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Text(
                              '${controller.userinfo?.isStaff == true ? 'üëë' : 'üé©'}${controller.userinfo?.user.toString()}',
                              style: TextStyle(fontSize: 12, color: colorScheme.foreground),
                            ),
                            InkWell(
                              onTap: () {
                                controller.logout();
                                controller.update();
                              },
                              child: Icon(Icons.exit_to_app, size: 16, color: colorScheme.foreground),
                            ),
                          ],
                        ),
                        if (controller.authInfo != null) ...[
                          Text(
                            'VIP: ${controller.authInfo?.username.toString()}',
                            style: TextStyle(fontSize: 12, color: colorScheme.foreground),
                          ),
                          Text(
                            'Expire: ${controller.authInfo?.timeExpire.toString()}',
                            style: TextStyle(fontSize: 12, color: colorScheme.foreground),
                          )
                        ],
                        InkWell(
                          onTap: () async {
                            await Clipboard.setData(ClipboardData(text: baseUrl));
                          },
                          child: Text(
                            '$baseUrl',
                            overflow: TextOverflow.ellipsis,
                            style: TextStyle(fontSize: 12, color: colorScheme.foreground),
                          ),
                        ),
                      ],
                    ),
                  );
                }
                return SizedBox.shrink();
              }),
              Expanded(
                child: SingleChildScrollView(
                  child: IntrinsicHeight(
                    child: NavigationRail(
                      useIndicator: true,
                      extended: !controller.isSmallHorizontalScreen,
                      selectedIndex: controller.initPage,
                      selectedLabelTextStyle: TextStyle(color: ShadTheme.of(context).colorScheme.foreground),
                      selectedIconTheme: Theme.of(context)
                          .iconTheme
                          .copyWith(color: ShadTheme.of(context).colorScheme.primaryForeground),
                      indicatorColor: ShadTheme.of(context).colorScheme.primary,
                      unselectedLabelTextStyle: TextStyle(color: colorScheme.foreground.withOpacity(0.7)),
                      unselectedIconTheme:
                          Theme.of(context).iconTheme.copyWith(color: colorScheme.foreground.withOpacity(0.7)),
                      backgroundColor: Colors.transparent,
                      onDestinationSelected: (index) => controller.changePage(index),
                      labelType: controller.isSmallHorizontalScreen
                          ? NavigationRailLabelType.selected
                          : NavigationRailLabelType.none,
                      destinations: controller.destinations,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    });
  }

  Widget _actionButtonList(BuildContext context) {
    return GetBuilder<HomeController>(builder: (controller) {
      var shadColorScheme = ShadTheme.of(context).colorScheme;
      return Row(
        mainAxisAlignment: MainAxisAlignment.end,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          if (kDebugMode) ...[
            const LoggingView(),
            const SizedBox(width: 15),
          ],
          const WebSocketLoggingWidget(),
          const SizedBox(width: 15),
          ThemeIconButton(
            icon: Icon(LucideIcons.palette, size: 20, color: shadColorScheme.foreground),
          ),
          const SizedBox(width: 15),
          if (controller.userinfo?.isStaff == true) ...[
            CustomUpgradeWidget(),
            const SizedBox(width: 15),
            SiteMap(
              icon: Icon(
                Icons.map,
                size: 20,
                color: shadColorScheme.foreground,
              ),
            ),
          ],
          if (controller.userinfo?.isStaff == true) ...[
            const SizedBox(width: 15),
            CustomPopup(
              showArrow: false,
              backgroundColor: shadColorScheme.background,
              barrierColor: Colors.transparent,
              content: SizedBox(
                width: 150,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      PopupMenuItem<String>(
                        child: Text(
                          'Êí≠ÊîæËßÜÈ¢ë',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          final urlController = TextEditingController();
                          showShadDialog(
                            context: context,
                            builder: (context) => ShadDialog(
                              title: const Text('Êí≠ÊîæÁΩëÁªúËßÜÈ¢ë'),
                              // description: const Text("ÊµãËØïÈìæÊé•"),
                              actions: [
                                ShadButton(
                                  child: Text('Êí≠Êîæ'),
                                  onPressed: () {
                                    if (urlController.text.isEmpty == true || !urlController.text.startsWith("http")) {
                                      return;
                                    } else {
                                      Get.back();
                                      Get.dialog(CustomCard(
                                          child: VideoPlayerPage(
                                        initialUrl: urlController.text,
                                      )));
                                    }
                                  },
                                )
                              ],
                              child: ConstrainedBox(
                                constraints: const BoxConstraints(maxWidth: 320),
                                child: ShadInput(
                                  controller: urlController,
                                  placeholder: Text('ËæìÂÖ•ËßÜÈ¢ëURL',
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: shadColorScheme.foreground,
                                      )),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'ÂÖ®ÂëòÁ≠æÂà∞',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          await signAllSiteButton();
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'Á´ôÁÇπÊï∞ÊçÆ',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          await getAllStatusButton();
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'ÊâπÈáèÊìç‰Ωú',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          const List<Tab> tabs = [
                            Tab(text: 'ÊâπÈáè‰øÆÊîπ'),
                            Tab(text: 'Ê∏ÖÁêÜÊï∞ÊçÆ'),
                          ];
                          TextEditingController keyController = TextEditingController(text: '');
                          TextEditingController valueController = TextEditingController(text: '');
                          Map<String, String> selectOptions = {"Á´ôÁÇπUA": "user_agent", "ÁΩëÁªú‰ª£ÁêÜ": "proxy"};
                          const operateList = ["Á´ôÁÇπUA", "ÁΩëÁªú‰ª£ÁêÜ"];
                          Get.bottomSheet(
                            backgroundColor: shadColorScheme.background,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5.0), // ÂúÜËßíÂçäÂæÑ
                            ),
                            SizedBox(
                              height: 240,
                              // width: 240,
                              child: DefaultTabController(
                                length: tabs.length,
                                child: Scaffold(
                                  backgroundColor: Colors.transparent,
                                  resizeToAvoidBottomInset: false,
                                  appBar: const TabBar(tabs: tabs),
                                  body: TabBarView(
                                    children: [
                                      SingleChildScrollView(
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceAround,
                                          spacing: 10,
                                          children: [
                                            Padding(
                                              padding: const EdgeInsets.all(8.0),
                                              child: ConstrainedBox(
                                                constraints: const BoxConstraints(minWidth: double.infinity),
                                                child: ShadSelect<String>(
                                                    placeholder: const Text('ÈÄâÊã©Êìç‰Ωú'),
                                                    decoration: ShadDecoration(border: ShadBorder.none),
                                                    trailing: const Text('ÈÄâÊã©Êìç‰Ωú'),
                                                    initialValue: operateList.first,
                                                    options: operateList
                                                        .map((key) => ShadOption(value: key, child: Text(key)))
                                                        .toList(),
                                                    selectedOptionBuilder: (context, value) {
                                                      return Text(value);
                                                    },
                                                    onChanged: (String? value) {
                                                      keyController.text = value!;
                                                    }),
                                              ),
                                            ),
                                            CustomTextField(controller: valueController, labelText: "ÊõøÊç¢‰∏∫"),
                                            Row(
                                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                                              children: [
                                                ShadButton.destructive(
                                                  size: ShadButtonSize.sm,
                                                  onPressed: () {
                                                    Get.back(result: false);
                                                  },
                                                  child: const Text('ÂèñÊ∂à'),
                                                ),
                                                ShadButton(
                                                  size: ShadButtonSize.sm,
                                                  onPressed: () async {
                                                    Get.back(result: true);
                                                    await bulkUpgradeHandler({
                                                      "key": selectOptions[keyController.text]!,
                                                      "value":
                                                          StringUtils.parseJsonOrReturnString(valueController.text),
                                                    });
                                                  },
                                                  child: const Text('Á°ÆËÆ§'),
                                                ),
                                              ],
                                            )
                                          ],
                                        ),
                                      ),
                                      Padding(
                                        padding: const EdgeInsets.symmetric(horizontal: 28.0),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          children: [
                                            CustomTextTag(
                                                labelText: "ÊÖéÁî®ÔºåÊ∏ÖÁêÜÂêéÊï∞ÊçÆÊó†Ê≥ïÊÅ¢Â§ç",
                                                backgroundColor: shadColorScheme.destructive),
                                            ShadButton.destructive(
                                                size: ShadButtonSize.sm,
                                                child: Text("Á≤æÁÆÄÂéÜÂè≤Êï∞ÊçÆ"),
                                                onPressed: () async {
                                                  Get.defaultDialog(
                                                    title: "Á°ÆËÆ§ÂêóÔºü",
                                                    middleText: "Êú¨Êìç‰Ωú‰ºöÁ≤æÁÆÄÁ´ôÁÇπÊï∞ÊçÆÔºåÂè™‰øùÁïôÊúÄËøë15Â§©ÁöÑÂéÜÂè≤Êï∞ÊçÆÔºåÁ°ÆËÆ§Á≤æÁÆÄÊï∞ÊçÆÂêóÔºü",
                                                    actions: [
                                                      ShadButton.destructive(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () async {
                                                          Get.back(result: false);
                                                        },
                                                        child: const Text('ÂèñÊ∂à'),
                                                      ),
                                                      ShadButton(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () async {
                                                          Get.back(result: true);
                                                          await bulkUpgradeHandler({
                                                            "key": "status_15",
                                                            "value": {},
                                                          });
                                                        },
                                                        child: const Text('Á°ÆËÆ§'),
                                                      ),
                                                    ],
                                                  );
                                                }),
                                            ShadButton.destructive(
                                                size: ShadButtonSize.sm,
                                                child: Text("Ê∏ÖÈô§ÂéÜÂè≤Êï∞ÊçÆ"),
                                                onPressed: () async {
                                                  Get.defaultDialog(
                                                    title: "Á°ÆËÆ§ÂêóÔºü",
                                                    middleText: "Á°ÆËÆ§Ê∏ÖÈô§Á´ôÁÇπÂéÜÂè≤Êï∞ÊçÆÂêóÔºü",
                                                    actions: [
                                                      ShadButton.destructive(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () async {
                                                          Get.back(result: false);
                                                        },
                                                        child: const Text('ÂèñÊ∂à'),
                                                      ),
                                                      ShadButton(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () async {
                                                          Get.back(result: true);
                                                          await bulkUpgradeHandler({
                                                            "key": "status",
                                                            "value": {},
                                                          });
                                                        },
                                                        child: const Text('Á°ÆËÆ§'),
                                                      ),
                                                    ],
                                                  );
                                                }),
                                            ShadButton.destructive(
                                                size: ShadButtonSize.sm,
                                                child: Text("Ê∏ÖÈô§Á≠æÂà∞Êï∞ÊçÆ"),
                                                onPressed: () async {
                                                  Get.defaultDialog(
                                                    title: "Á°ÆËÆ§ÂêóÔºü",
                                                    middleText: "Á°ÆËÆ§Ê∏ÖÈô§Á´ôÁÇπÁ≠æÂà∞Êï∞ÊçÆÂêóÔºü",
                                                    actions: [
                                                      ShadButton.destructive(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () {
                                                          Get.back(result: false);
                                                        },
                                                        child: const Text('ÂèñÊ∂à'),
                                                      ),
                                                      ShadButton(
                                                        size: ShadButtonSize.sm,
                                                        onPressed: () async {
                                                          Get.back(result: true);
                                                          await bulkUpgradeHandler({
                                                            "key": "sign_info",
                                                            "value": {},
                                                          });
                                                        },
                                                        child: const Text('Á°ÆËÆ§'),
                                                      ),
                                                    ],
                                                  );
                                                }),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                      PopupMenuItem(
                        child: CustomUAWidget(
                          child: Text(
                            'Ëá™ÂÆö‰πâUA',
                            style: TextStyle(
                              color: shadColorScheme.foreground,
                            ),
                          ),
                        ),
                      ),
                      PopupMenuItem(
                        child: InviteUser(
                          child: Text(
                            'ËØïÁî®ÈÇÄËØ∑',
                            style: TextStyle(
                              color: shadColorScheme.foreground,
                            ),
                          ),
                        ),
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'PTPP',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async => pickAndUpload(),
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'CC ÂêåÊ≠•',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          await importFromCookieCloud();
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'CF ÊµãÈÄü',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          CommonResponse res = await speedTestApi();
                          if (res.code == 0) {
                            Get.back();
                            Get.snackbar('ÊµãÈÄü‰ªªÂä°ÂèëÈÄÅÊàêÂäü', res.msg, colorText: shadColorScheme.foreground);
                          } else {
                            Get.snackbar('ÊµãÈÄü‰ªªÂä°ÂèëÈÄÅÂ§±Ë¥•', 'ÊµãÈÄü‰ªªÂä°ÊâßË°åÂá∫ÈîôÂï¶Ôºö${res.msg}', colorText: shadColorScheme.destructive);
                          }
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'Êà™ÂõæÂàÜ‰∫´',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          await ScreenshotSaver.captureAndSave(_captureKey);
                        },
                      ),
                      PopupMenuItem<String>(
                        child: Text(
                          'ÈÄÄÂá∫ÁôªÂΩï',
                          style: TextStyle(
                            color: shadColorScheme.foreground,
                          ),
                        ),
                        onTap: () async {
                          controller.logout();
                        },
                      ),
                    ],
                  ),
                ),
              ),
              child: Icon(
                Icons.add_box_outlined,
                size: 24,
                color: shadColorScheme.foreground,
              ),
            )
          ],
          const SizedBox(width: 15)
        ],
      );
    });
  }

  void pickAndUpload() async {
    Get.defaultDialog(
      title: "ÈÄâÊã© PTPP Â§á‰ªΩÊñá‰ª∂",
      content: Center(
        child: ShadButton.link(
          onPressed: () async {
            FilePickerResult? result =
                await FilePicker.platform.pickFiles(type: FileType.custom, allowedExtensions: ['zip']);
            if (result != null) {
              PlatformFile file = result.files.single;
              Logger.instance.d(result.files.single.path!);
              Logger.instance.d(file);
              Logger.instance.d(file.path);
              if (!kIsWeb && file.path?.contains('PT-Plugin-Plus-Backup') != true) {
                Get.snackbar(
                  'ÈîôËØØ',
                  'ËØ∑ÈÄâÊã©Ê≠£Á°ÆÁöÑPTPPÂ§á‰ªΩÊñá‰ª∂„Äê‚ÄúPT-Plugin-Plus-Backup‚ÄùÂºÄÂ§¥ÁöÑ ZIP Êñá‰ª∂„ÄëÔºÅ',
                  colorText: Colors.deepOrange,
                  duration: const Duration(seconds: 3),
                );
                return;
              }
              // return;
              CommonResponse res = await importFromPTPPApi(file);
              Get.back();
              if (res.succeed) {
                Get.snackbar(
                  'PTPPÂØºÂÖ•‰ªªÂä°',
                  'PTPPÂØºÂÖ•‰ªªÂä°‰ø°ÊÅØÔºö${res.msg}',
                );
              } else {
                Get.snackbar(
                  'PTPPÂØºÂÖ•‰ªªÂä°Â§±Ë¥•',
                  'PTPPÂØºÂÖ•‰ªªÂä°ÊâßË°åÂá∫ÈîôÂï¶Ôºö${res.msg}',
                );
              }
            } else {
              Get.snackbar(
                'PTPPÂØºÂÖ•‰ªªÂä°Â§±Ë¥•',
                'PTPPÂØºÂÖ•‰ªªÂä°ÊâßË°åÂá∫ÈîôÂï¶ÔºöÊú™ÂèëÁé∞‰Ω†ÊâÄÈÄâÊã©ÁöÑÊñá‰ª∂ÔºÅ',
              );
            }
          },
          child: const Text("ÈÄâÊã©Êñá‰ª∂"),
        ),
      ),
    );
    return;
  }
}
